dml 1.2;
import "constant.dml";
import "port-queue.dml";

method udp_check_sum(Item *afdx_frame, Afdx_Frame_Packet* afdx_frame_packet)
{
		local uint32 sum =0;
		local uint32 i=0;
		local uint16 udp_checksum;
		local uint16 *address;
		local uint16 *udp_address_in_afdx;
		local uint16 *udp_check_in_afdx;

		//sum dest ip , source ip, udp_protocal,udp_length
		address = cast(&afdx_frame_packet->ip_header_structure.IP_SOURCE_ADDRESS,uint16 *);
		for(i=0; i < IP_ADDRESS_LENGTH/2; i++ )
			sum += address[i];
		sum += UPD_PROTOCAL_SUM;
		sum +=afdx_frame_packet->udp_header_structure.UDP_LENGTH;

		udp_address_in_afdx = cast(afdx_frame->frame + (MAC_HEADER_LENGTH + IPV4_LENGTH + IP_HEADER_LENGTH), uint16*);   
		call $part_udp_check_sum(udp_address_in_afdx,
								 afdx_frame_packet->udp_header_structure.UDP_LENGTH,sum)
								 ->(udp_checksum);
		udp_check_in_afdx= cast(afdx_frame->frame+UDP_CHECKSUM_ADDR, uint16 *);
		*udp_check_in_afdx = udp_checksum;
}

method receive_udp_check_sum(PortQueue* queue)->(bool result)
{
		local uint32 sum =0;
		local uint32 i=0;
		local uint16 old_udp_checksum;
		local uint16 new_udp_checksum;
		local uint16 udp_check_in_item;
		local uint16* address;
		local uint16* checksum_data;
		local PortItem port_item;
		local QueueItem *checksumitem;
		local uint32 offset = 0;
		
		checksumitem = queue->tail->prev_whole->next;
		port_item.dest_ip = checksumitem->dest_ip;
		port_item.src_ip = checksumitem->src_ip;
		port_item.size = checksumitem->whole_size;
		port_item.frame = new uint8[checksumitem->whole_size];
		while(checksumitem)
		{
			memcpy(port_item.frame+offset,checksumitem->buffer,checksumitem->single_size);
			offset += checksumitem->single_size;
			checksumitem = checksumitem->next;
		}

		old_udp_checksum = *cast(port_item.frame+UDP_CHECKSUM_OFFSET,uint16 *);
		*cast(port_item.frame+UDP_CHECKSUM_OFFSET,uint16 *) = 0;
		
		address = cast(&port_item.dest_ip,uint16 *);
		for(i=0; i < DEST_IP_ADDR_LENGTH/2; i++ )
			sum += address[i];
		address = cast(&port_item.src_ip,uint16 *);
		for(i=0; i < SRC_IP_ADDR_LENGTH/2; i++ )
			sum += address[i];
		sum += UPD_PROTOCAL_SUM;
		sum += port_item.size;
		checksum_data = cast(port_item.frame,uint16 *);
		call $part_udp_check_sum(checksum_data,
								 port_item.size,sum)
								 ->(new_udp_checksum);
		log "info" : "new_udp_checksum =%x", new_udp_checksum;
		log "info" : "new_udp_checksum =%x", old_udp_checksum;
		if(new_udp_checksum != old_udp_checksum) result = false;
		else result = true;
}


method part_udp_check_sum(uint16* a, uint32 len, uint32 sum) -> (uint16 checksum)
{
    while (len > 1) {
        sum += *a++;
        len -= 2;
    }

    if (len != 0) {
		sum += *cast(a, uint8 *);    // a 到底应该是什么类型？？？？
    }

    while ((sum >> 16) != 0) {
        sum = (sum >> 16) + (sum & 0xffff);
    }
	
	sum = ~sum;
	checksum = cast(sum, uint16);
}

method ip_check_sum(uint8 *ptr, uint32 size)->(uint16 checksum)  
{  

    local uint32 cksum = 0;  
    local uint32 index = 0;  
	local uint32 i = 0;
	*(ptr + 10) = 0;  
    *(ptr + 11) = 0;  
  
    if(size % 2 != 0)  
        return;  
      
    while(index < size)  
    {          
        cksum += *(ptr + index + 1);  
        cksum += *(ptr + index) << 8;  
  
        index += 2;  
    }  
  
    while(cksum > 0xffff)  
    {  
        cksum = (cksum >> 16) + (cksum & 0xffff);  
    }  
	
	cksum = ~cksum;  
	checksum = cast(cksum, uint16);
}  


method unpacket_ip_checksum(uint8 *buffer)->(uint8 correct)
{
	local uint16 old_ip_checksum;
	local uint16 new_ip_checksum;
	local uint8* ip_header_addr;
	
	ip_header_addr = cast(buffer + IP_HEADER_ADDR, uint8 *);
	old_ip_checksum = *cast(buffer + IP_CHECKSUM_ADDR, uint16 *);
	
	buffer[IP_CHECKSUM_ADDR]=0;
	buffer[IP_CHECKSUM_ADDR+1]=0;
	
	call $ip_check_sum(ip_header_addr, IP_HEADER_LENGTH)->(new_ip_checksum);
	log "info" : "2	new_ip_checksum =%x", new_ip_checksum;
	log "info" : "2	old_ip_checksum =%x", old_ip_checksum;
	if(new_ip_checksum != old_ip_checksum)
		correct = INCORRECT;
	else 
		correct = CORRECT;
}



